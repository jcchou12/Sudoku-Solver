#include <iostream>
#include "timing.h"
#include "openmp-parallel.cpp"
using namespace std;

#define M 16

/* Prints the grid */
void printGrid(int grid[N][N])
{
    for (int row = 0; row < N; row++) 
    {
        for (int col = 0; col < N; col++)
            std::cout << grid[row][col] << " ";
        std::cout << endl;
    }
}


void checkCorrect16()
{
    std::cout << "16x16 Tests: \n";
    std::cout << "Test 5 - solvable-random: \n";
    Timer t;
    int grid1[M][M] = { { 0, 0, 12, 8, 11, 0, 13, 10, 0, 2, 9, 1, 6, 15, 0, 0 },
                       { 0, 0, 0, 11, 8, 0, 0, 0, 5, 12, 13, 10, 4, 0, 0, 2 },
                       { 13, 2, 10, 0, 3, 7, 5, 0, 8, 6, 14, 15, 11, 0, 12, 16 },
                       { 16, 6, 9, 15, 2, 0, 0, 14, 11, 4, 7, 3, 5, 10, 0, 13 },
                       { 15, 12, 7, 0, 0, 0, 0, 11, 2, 0, 16, 13, 0, 4, 1, 0 },
                       { 11, 8, 6, 0, 4, 13, 3, 7, 0, 9, 0, 14, 16, 0, 0, 12 },
                       { 2, 4, 5, 9, 1, 16, 14, 6, 10, 3, 12, 11, 15, 7, 0, 0 },
                       { 14, 13, 1, 16, 15, 12, 2, 5, 0, 7, 8, 0, 9, 0, 11, 10 },
                       { 9, 1, 13, 0, 14, 11, 15, 4, 12, 16, 0, 0, 10, 6, 0, 0 },
                       { 0, 0, 4, 6, 0, 9, 0, 0, 13, 14, 0, 7, 12, 11, 0, 1 },
                       { 0, 11, 16, 12, 0, 0, 1, 0, 3, 15, 4, 6, 13, 14, 0, 7 },
                       { 0, 0, 2, 14, 0, 0, 0, 13, 9, 1, 11, 5, 8, 0, 4, 15 },
                       { 0, 7, 11, 0, 9, 2, 10, 8, 0, 0, 0, 16, 1, 12, 15, 0 },
                       { 4, 0, 15, 2, 13, 0, 11, 0, 1, 10, 6, 0, 0, 8, 16, 14 },
                       { 12, 0, 0, 1, 6, 14, 0, 15, 7, 11, 5, 2, 3, 13, 10, 9 },
                       { 10, 9, 14, 13, 7, 0, 16, 1, 4, 8, 0, 0, 0, 5, 6, 11 } };
    Board b1;
    b1.copyBoard(grid1);
    t.reset();
    if (SolveSudoku(b1) == true)
        printGrid(grid1);
    else
        std::cout << "No solution exists\n";
    std::cout << "Time Taken: " << t.elapsed() << "\n";

    std::cout << "\nTest 2 - solvable-sparse: \n";
    int grid2[M][M] = { { 14, 0, 16, 0, 15, 0, 5, 4, 0, 0, 0, 2, 0, 0, 0, 0 },
                       { 0, 0, 0, 0, 2, 12, 7, 0, 0, 0, 0, 16, 0, 5, 0, 8 },
                       { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 10, 5, 0, 0, 0, 0 },
                       { 0, 0, 0, 0, 0, 8, 16, 9, 7, 0, 4, 3, 0, 0, 0, 11 },
                       { 0, 0, 14, 0, 0, 15, 0, 0, 0, 0, 12, 4, 0, 0, 9, 0 },
                       { 9, 0, 0, 0, 0, 0, 8, 5, 0, 2, 0, 0, 11, 0, 0, 7 },
                       { 0, 0, 0, 4, 13, 0, 0, 6, 0, 0, 0, 0, 16, 0, 0, 0 },
                       { 0, 0, 6, 7, 0, 16, 0, 0, 0, 5, 9, 0, 0, 0, 10, 13 },
                       { 5, 0, 0, 0, 0, 0, 0, 3, 9, 0, 14, 0, 0, 0, 6, 1 },
                       { 0, 1, 0, 0, 0, 13, 0, 0, 0, 10, 0, 8, 0, 2, 0, 4 },
                       { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                       { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                       { 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0 },
                       { 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0 },
                       { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15 },
                       { 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 } };
    Board b2;
    b2.copyBoard(grid2);
    t.reset();
    if (SolveSudoku(b2) == true)
        printGrid(grid2);
    else
        std::cout << "No solution exists";
    std::cout << "Time Taken: " << t.elapsed() << "\n";
  
    std::cout << "\nTest 3 - unsolvable-random: \n";
    int grid3[M][M] = { { 0, 0, 12, 8, 11, 0, 13, 10, 0, 2, 9, 1, 6, 15, 0, 0 },
                       { 0, 0, 0, 11, 8, 0, 0, 0, 5, 12, 13, 10, 4, 0, 0, 2 },
                       { 13, 2, 10, 0, 3, 7, 5, 0, 8, 6, 14, 15, 11, 0, 12, 16 },
                       { 16, 6, 9, 15, 2, 0, 0, 14, 11, 4, 7, 3, 5, 10, 0, 13 },
                       { 15, 12, 7, 0, 0, 0, 0, 11, 2, 0, 16, 13, 0, 4, 1, 0 },
                       { 11, 8, 6, 0, 4, 13, 3, 7, 0, 9, 0, 14, 16, 0, 0, 12 },
                       { 2, 4, 5, 9, 1, 16, 14, 6, 10, 3, 12, 11, 15, 7, 0, 0 },
                       { 14, 13, 1, 16, 15, 12, 2, 5, 0, 7, 8, 0, 9, 0, 11, 10 },
                       { 9, 1, 13, 0, 14, 11, 15, 4, 12, 16, 0, 0, 10, 6, 0, 0 },
                       { 0, 0, 4, 6, 0, 9, 0, 0, 13, 14, 0, 7, 12, 11, 0, 1 },
                       { 0, 11, 16, 12, 0, 0, 1, 0, 3, 15, 4, 6, 13, 14, 0, 7 },
                       { 0, 0, 2, 14, 0, 0, 0, 13, 9, 1, 11, 5, 8, 0, 4, 15 },
                       { 0, 7, 11, 0, 9, 2, 10, 8, 0, 0, 0, 16, 1, 12, 15, 0 },
                       { 4, 0, 15, 2, 13, 0, 11, 0, 1, 10, 6, 0, 0, 8, 16, 14 },
                       { 12, 0, 0, 1, 6, 14, 0, 15, 7, 11, 5, 2, 3, 13, 10, 9 },
                       { 10, 9, 14, 13, 7, 0, 16, 1, 4, 8, 3, 0, 0, 5, 6, 11 } };
    Board b3;
    b3.copyBoard(grid3);
    t.reset();
    if (SolveSudoku(b3) == true)
        printGrid(grid3);
    else
        std::cout << "No solution exists\n";
    std::cout << "Time Taken: " << t.elapsed() << "\n";

    std::cout << "\nTest 4 - unsolvable-sparse: \n";
    int grid4[M][M] = { { 1, 2, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                       { 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                       { 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0 },
                       { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5 },
                       { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
                       { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                       { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                       { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                       { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                       { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                       { 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                       { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                       { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                       { 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                       { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                       { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 } };
    Board b4;
    b4.copyBoard(grid4);
    t.reset();
    if (SolveSudoku(b4) == true)
        printGrid(grid4);
    else
        std::cout << "No solution exists\n";
    std::cout << "Time Taken: " << t.elapsed() << "\n";
}


int main()
{
    checkCorrect16();
    return 0;
}
